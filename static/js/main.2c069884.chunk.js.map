{"version":3,"sources":["components/TodoTemplate.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","TodoHeadBlock","TodoHead","className","Remove","TodoItemBlock","CheckCircle","props","done","css","Text","TodoItem","id","text","TodoListBlock","TodoList","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","TodoCreate","useState","setOpen","autoFocus","placeholder","onClick","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kkBAGA,IAAMA,EAAoBC,IAAOC,IAAV,KAqBRC,MAJf,YAAqC,IAAbC,EAAY,EAAZA,SACpB,OAAO,kBAACJ,EAAD,KAAoBI,I,+hBClB/B,IAAMC,EAAgBJ,IAAOC,IAAV,KAmCJI,MAVf,WACI,OACI,kBAACD,EAAD,KACI,0CACA,yBAAKE,UAAU,OAAf,YACA,yBAAKA,UAAU,cAAf,wB,6tCC7BZ,IAAMC,EAASP,IAAOC,IAAV,KAaNO,EAAgBR,IAAOC,IAAV,IAMTM,GAMJE,EAAcT,IAAOC,IAAV,KAWX,SAAAS,GAAK,OACHA,EAAMC,MACNC,YADA,QAQFC,EAAOb,IAAOC,IAAV,KAIJ,SAAAS,GAAK,OACHA,EAAMC,MACNC,YADA,QAmBOE,MAZf,YAAoC,EAAhBC,GAAiB,IAAdJ,EAAa,EAAbA,KAAMK,EAAO,EAAPA,KACzB,OACI,kBAACR,EAAD,KACI,kBAACC,EAAD,CAAaE,KAAQA,GAAOA,GAAQ,kBAAC,IAAD,OACpC,kBAACE,EAAD,CAAMF,KAAQA,GAAOK,GACrB,kBAACT,EAAD,KACI,kBAAC,IAAD,S,gKC/DhB,IAAMU,EAAgBjB,IAAOC,IAAV,KAmBJiB,MAZf,WACI,OACA,kBAACD,EAAD,KACI,kBAAC,EAAD,CAAUD,KAAK,kCAASL,MAAM,IAC9B,kBAAC,EAAD,CAAUK,KAAK,0CAAYL,MAAM,IACjC,kBAAC,EAAD,CAAUK,KAAK,2BAAOL,MAAM,IAC5B,kBAAC,EAAD,CAAUK,KAAK,kCAASL,MAAM,M,6pDCbtC,IAAMQ,EAAenB,IAAOoB,OAAV,KA6BZ,SAAAV,GAAK,OACHA,EAAMW,MACNT,YADA,QAcFU,EAAuBtB,IAAOC,IAAV,KAOpBsB,EAAavB,IAAOwB,KAAV,KAYVC,EAAQzB,IAAO0B,MAAV,KAgCIC,MAtBf,WAAuB,IAAD,EAEMC,oBAAS,GAFf,mBAEXP,EAFW,KAELQ,EAFK,KAMlB,OACI,oCACKR,GACG,kBAACC,EAAD,KACI,kBAACC,EAAD,KACI,kBAACE,EAAD,CAAOK,WAAS,EAACC,YAAY,yEAIzC,kBAACZ,EAAD,CAAca,QAXL,kBAAMH,GAASR,IAWSA,KAAMA,GACnC,kBAAC,IAAD,S,8GCtFhB,IAAMY,EAAcC,YAAH,KAmBFC,MAbf,WACE,OACE,oCACE,kBAACF,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCRYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c069884.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst TodoTemplateBlock = styled.div`\n    width: 512px;\n    height: 768px;\n\n    position: relative;\n    background: white;\n    border-radius: 16px;\n    box-shadow: 0 0 8px rgaba(0,0,0,0.04);\n\n    margin: 0 auto;\n\n    margin-top : 96px;\n    margin-bottom: 32px;\n    display: flex;\n    flex-direction: column;\n`;\n\nfunction TodoTemplate({ children }) {\n    return <TodoTemplateBlock>{children}</TodoTemplateBlock>\n}\n\nexport default TodoTemplate\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst TodoHeadBlock = styled.div`\n    padding-top: 48px;\n    padding-left: 32px;\n    padding-right: 32px;\n    padding-bottom: 24px;\n    border-bottom: 1px solid #e9ecef;\n    height: 15vh;\n    h1{\n        margin:0;\n        font-size: 36px;\n        color: #343a40;\n    }\n    .day{\n        margin-top: 4px;\n        color: #868e96;\n        font-size: 21px;\n    }\n    .tasks-left{\n        color: #20c997;\n        font-size: 18px;\n        margin-top: 40px;\n        font-weight: bold;\n    }\n`;\n\nfunction TodoHead() {\n    return (\n        <TodoHeadBlock>\n            <h1>2020.10.22</h1>\n            <div className='day'>Thursday</div>\n            <div className='tasks-left'>To do list : 2 / 4</div>\n        </TodoHeadBlock>\n    )\n}\n\nexport default TodoHead\n","import React from 'react'\nimport styled,{ css } from 'styled-components'\nimport {MdDone, MdDelete} from 'react-icons/md'\n\nconst Remove = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: #dee2e6;\n    font-size: 24px;\n    cursor: pointer;\n    &:hover {\n        color: #ff6b6b;\n    }\n    display: none;\n`\n\nconst TodoItemBlock = styled.div`\n    display: flex;\n    align-items: center;\n    padding-top: 12px;\n    padding-bottom: 12px;\n    &:hover {\n        ${Remove} {\n            display: initial;\n        }\n    }\n`\n\nconst CheckCircle = styled.div`\n    width: 32px;\n    height: 32px;\n    border-radius: 16px;\n    border 1px solid #ced4da;\n    font-size: 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-right: 20px;\n    cursor: pointer;\n    ${props =>\n        props.done &&\n        css `\n            border: 1px solid #38d9a9;\n            color: #38d9a9;\n        `\n    }\n`\n\nconst Text = styled.div`\n    flex: 1;\n    font-size: 21px;\n    color: #495057;\n    ${props =>\n        props.done &&\n        css`\n            color: #ced4da;\n        `\n    }\n`\n\nfunction TodoItem({ id,done, text}) {\n    return (\n        <TodoItemBlock>\n            <CheckCircle done = {done}>{done && <MdDone />}</CheckCircle>\n            <Text done = {done}>{text}</Text>\n            <Remove>\n                <MdDelete />\n            </Remove>\n        </TodoItemBlock>\n    )\n}\n\nexport default TodoItem\n","import React from 'react'\nimport styled from 'styled-components'\nimport TodoItem from './TodoItem'\n\nconst TodoListBlock = styled.div`\n    flex: 1;\n    padding: 20px 32px;\n    padding-bottom: 48px;\n    overflow-y: auto;\n`\n\nfunction TodoList() {\n    return (\n    <TodoListBlock>\n        <TodoItem text='웹 개발하기' done={true} />\n        <TodoItem text='코테 1문제 풀기' done={true} />\n        <TodoItem text='운동하기' done={false} />\n        <TodoItem text='식단 지키기' done={false} />\n    </TodoListBlock>\n    )\n    \n}\n\nexport default TodoList\n","import React, {useState} from 'react'\nimport styled, {css} from 'styled-components'\nimport {MdAdd} from 'react-icons/md'\n\nconst CircleButton = styled.button`\n    background: #38d9a9;\n    &:hover {\n        background: #63e6be;\n    }\n    &:active {\n        background: #20c997;\n    }\n    \n    z-index: 5;\n    cursor: pointer;\n    width: 80px;\n    height: 80px;\n    display: block;\n    align-items: center;\n    justify-content: center;\n    font-size: 60px;\n    position: absolute;\n    left: 50%;\n    bottom: 0px;\n    transform: translate(-50%,50%);\n    color: white;\n    border-radius: 50%;\n    border: none;\n    display: flex;\n    aligh-items: center;\n    justify-content: center;\n\n    transition: 0.125s all ease-in;\n    ${props =>\n        props.open &&\n        css`\n            background: #ff6b6b;\n            &:hover{\n                background: #ff8787;\n            }\n            &:active{\n                background: #fa5252;\n            }\n            transform: translate(-50%, 50%) rotate(45deg);\n        `\n    }\n`\n\nconst InsertFormPositioner = styled.div`\n    width: 100%;\n    bottom: 0;\n    left: 0;\n    position: absolute;\n`\n\nconst InsertForm = styled.form`\n    background: #f8f9fa;\n    padding-left: 32px;\n    padding-top: 32px;\n    padding-right: 32px;\n    padding-bottom: 72px;\n\n    border-bottom-left-radius: 16px;\n    border-bottom-right-radius: 16px;\n    border-top: 1px solid #e9ecef;\n`\n\nconst Input = styled.input`\n    padding: 12px;\n    border-radius: 4px;\n    border: 1px solid #dee2e6;\n    width: 100%;\n    outline: none;\n    font-size: 18px;\n    box-sizing: border-box;\n`\n\nfunction TodoCreate() {\n\n    const [open, setOpen] = useState(false);\n\n    const onToggle = () => setOpen(!open);\n\n    return (\n        <>\n            {open && (\n                <InsertFormPositioner>\n                    <InsertForm>\n                        <Input autoFocus placeholder='list를 입력후 enter를 누르세요' />\n                    </InsertForm>\n                </InsertFormPositioner>\n            )}\n            <CircleButton onClick={onToggle} open={open}>\n                <MdAdd />\n            </CircleButton>\n        </>\n    )\n}\n\nexport default TodoCreate\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components'\nimport TodoTemplate from './components/TodoTemplate'\nimport TodoHead from './components/TodoHead'\nimport TodoList from './components/TodoList'\nimport TodoCreate from './components/TodoCreate'\n\nconst GlobalStyle = createGlobalStyle`\n  body{\n    background: #999;\n  }\n  `;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <TodoTemplate>\n        <TodoHead />\n        <TodoList />\n        <TodoCreate />\n      </TodoTemplate>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}